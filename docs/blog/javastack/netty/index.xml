<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Capa – Netty Stack</title>
    <link>https://reactivegroup.github.io/capa.io/blog/javastack/netty/</link>
    <description>Recent content in Netty Stack on Capa</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://reactivegroup.github.io/capa.io/blog/javastack/netty/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Netty Channel设计</title>
      <link>https://reactivegroup.github.io/capa.io/blog/2022/05/20/netty-channel%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://reactivegroup.github.io/capa.io/blog/2022/05/20/netty-channel%E8%AE%BE%E8%AE%A1/</guid>
      <description>
        
        
        &lt;h2 id=&#34;一整体流程概览&#34;&gt;一、整体流程概览&lt;/h2&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;11-启动流程&#34;&gt;1.1 启动流程&lt;/h3&gt;
&lt;h3 id=&#34;server端&#34;&gt;Server端&lt;/h3&gt;
&lt;h4 id=&#34;1-创建handler&#34;&gt;1. 创建Handler&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;EchoServerHandler&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;serverHandler&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;EchoServerHandler&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Handler类结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-创建eventloopgroup&#34;&gt;2. 创建EventLoopGroup&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;EventLoopGroup&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;NioEventLoopGroup&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;EventLoopGroup类结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;21-创建group下面的eventloop&#34;&gt;2.1 创建Group下面的EventLoop&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;EventLoop&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;newChild&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Executor&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;executor&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;NioEventLoop&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;executor&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SelectorProvider&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SelectStrategyFactory&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]).&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;newSelectStrategy&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;RejectedExecutionHandler&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]);&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-创建eventloop&#34;&gt;2.2 创建EventLoop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;taskQueue&lt;/code&gt;: &lt;code&gt;MpscChunkedArrayQueue&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tailQueue&lt;/code&gt;: &lt;code&gt;MpscChunkedArrayQueue&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;selectNowSupplier&lt;/code&gt;: &lt;code&gt;selector.selectNow()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pendingTasksCallable&lt;/code&gt;: &lt;code&gt;super.pendingTasks() + tailTasks.size()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;selectProvider&lt;/code&gt;: &lt;code&gt;SelectorProvider.provider()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-创建引导&#34;&gt;3. 创建引导&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;ServerBootstrap&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ServerBootstrap&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;31-初始化一个channel&#34;&gt;3.1 初始化一个Channel&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-bind流程&#34;&gt;4. bind流程&lt;/h4&gt;
&lt;h4 id=&#34;41-初始化一个channel&#34;&gt;4.1 初始化一个Channel&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;持有底层的SocketChannel:(此处的Channel为java.nio的Channel)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;42-初始化channelpipeline&#34;&gt;4.2 初始化ChannelPipeline&lt;/h4&gt;
&lt;p&gt;创建一个&lt;code&gt;DefaultChannelPipeline&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Channel和ChannelPipeline是双向绑定的关系，向ChannelPipeline中通过&lt;code&gt;addLast&lt;/code&gt;方法添加Handler。
将ChannelHandler包装进入ChannelContext, 然后ChannelPipeline持有ChannelContext的双向链表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;43-注册channelfuture&#34;&gt;4.3 注册ChannelFuture&lt;/h4&gt;
&lt;p&gt;ChannelFuture：对Channel的各个生命周期阶段注册回调&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;调用的是&lt;code&gt;AbstractChannel&lt;/code&gt;的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EventLoop&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;eventLoop&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;ChannelPromise&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;promise&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后是:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;eventLoop&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#c4a000&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;Runnable&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#5c35cc;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;register0&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;promise&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eventloop在这里是前面创建的EventLoopGroup&lt;/p&gt;
&lt;h4 id=&#34;44-register0解析&#34;&gt;4.4 register0()解析&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;pipeline.invokeHandlerAddedIfNeeded();&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;执行前面注册的ChannelHandler初始化initChannel的动作&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;第一个Handler执行完成后，会再次提交一个Runnable给EventLoop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ServerBootstrapAcceptor&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;EventLoop不断执行Task（该部分需要细化）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终进入bind()操作，执行&lt;code&gt;ServerSocketChannelImpl.bind()&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;client端&#34;&gt;Client端&lt;/h3&gt;
&lt;h4 id=&#34;1-启动流程&#34;&gt;1. 启动流程&lt;/h4&gt;
&lt;p&gt;同Server&lt;/p&gt;
&lt;h4 id=&#34;2-connect流程&#34;&gt;2. connect流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;connect操作会注册一个task给eventloop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eventloop执行task:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Bootstrap.doResolveAndConnect0()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;doConnect()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;channel.connect()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SocketChannelImpl.connect()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interestOps置为8&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;3-clienthandler&#34;&gt;3. ClientHandler&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;channelActive()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;channelRead()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;12-事件驱动模型设计&#34;&gt;1.2 事件驱动模型设计&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要包括4个基本组件：&lt;/p&gt;
&lt;p&gt;事件队列（event queue）：接收事件的入口，存储待处理事件&lt;/p&gt;
&lt;p&gt;分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元&lt;/p&gt;
&lt;p&gt;事件通道（event channel）：分发器与处理器之间的联系渠道&lt;/p&gt;
&lt;p&gt;事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作&lt;/p&gt;
&lt;p&gt;可以看出，相对传统轮询模式，事件驱动有如下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可扩展性好，分布式的异步架构，事件处理器之间高度解耦，可以方便扩展事件处理逻辑&lt;/li&gt;
&lt;li&gt;高性能，基于队列暂存事件，能方便并行异步处理事件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在同一组会话/链接中，将会触发不同的事件入口时，适合事件驱动架构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二主要模块&#34;&gt;二、主要模块&lt;/h2&gt;
&lt;h3 id=&#34;21-reactor线程模型&#34;&gt;2.1 Reactor线程模型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;1）Netty 抽象出两组线程池：BossGroup 和 WorkerGroup，也可以叫做 BossNioEventLoopGroup 和 WorkerNioEventLoopGroup。每个线程池中都有 NioEventLoop 线程。BossGroup 中的线程专门负责和客户端建立连接，WorkerGroup 中的线程专门负责处理连接上的读写。BossGroup 和 WorkerGroup 的类型都是 NioEventLoopGroup。&lt;/p&gt;
&lt;p&gt;2）NioEventLoopGroup 相当于一个事件循环组，这个组中含有多个事件循环，每个事件循环就是一个 NioEventLoop。&lt;/p&gt;
&lt;p&gt;3）NioEventLoop 表示一个不断循环的执行事件处理的线程，每个 NioEventLoop 都包含一个 Selector，用于监听注册在其上的 Socket 网络连接（Channel）。&lt;/p&gt;
&lt;p&gt;4）NioEventLoopGroup 可以含有多个线程，即可以含有多个 NioEventLoop。&lt;/p&gt;
&lt;p&gt;5）每个 BossNioEventLoop 中循环执行以下三个步骤：&lt;/p&gt;
&lt;p&gt;5.1）select：轮训注册在其上的 ServerSocketChannel 的 accept 事件（OP_ACCEPT 事件）&lt;/p&gt;
&lt;p&gt;5.2）processSelectedKeys：处理 accept 事件，与客户端建立连接，生成一个 NioSocketChannel，并将其注册到某个 WorkerNioEventLoop 上的 Selector 上&lt;/p&gt;
&lt;p&gt;5.3）runAllTasks：再去以此循环处理任务队列中的其他任务&lt;/p&gt;
&lt;p&gt;6）每个 WorkerNioEventLoop 中循环执行以下三个步骤：&lt;/p&gt;
&lt;p&gt;6.1）select：轮训注册在其上的 NioSocketChannel 的 read/write 事件（OP_READ/OP_WRITE 事件）&lt;/p&gt;
&lt;p&gt;6.2）processSelectedKeys：在对应的 NioSocketChannel 上处理 read/write 事件&lt;/p&gt;
&lt;p&gt;6.3）runAllTasks：再去以此循环处理任务队列中的其他任务&lt;/p&gt;
&lt;p&gt;7）在以上两个processSelectedKeys步骤中，会使用 Pipeline（管道），Pipeline 中引用了 Channel，即通过 Pipeline 可以获取到对应的 Channel，Pipeline 中维护了很多的处理器（拦截处理器、过滤处理器、自定义处理器等）。这里暂时不详细展开讲解 Pipeline。&lt;/p&gt;
&lt;h3 id=&#34;22-channelpipeline设计&#34;&gt;2.2 ChannelPipeline设计&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_15.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;1）Bootstrap 和 ServerBootstrap 分别是客户端和服务器端的引导类，一个 Netty 应用程序通常由一个引导类开始，主要是用来配置整个 Netty 程序、设置业务处理类（Handler）、绑定端口、发起连接等。&lt;/p&gt;
&lt;p&gt;2）客户端创建一个 NioSocketChannel 作为客户端通道，去连接服务器。&lt;/p&gt;
&lt;p&gt;3）服务端首先创建一个 NioServerSocketChannel 作为服务器端通道，每当接收一个客户端连接就产生一个 NioSocketChannel 应对该客户端。&lt;/p&gt;
&lt;p&gt;4）使用 Channel 构建网络 IO 程序的时候，不同的协议、不同的阻塞类型和 Netty 中不同的 Channel 对应，常用的 Channel 有：&lt;/p&gt;
&lt;p&gt;NioSocketChannel：非阻塞的 TCP 客户端 Channel（本案例的客户端使用的 Channel）
NioServerSocketChannel：非阻塞的 TCP 服务器端 Channel（本案例的服务器端使用的 Channel）
NioDatagramChannel：非阻塞的 UDP Channel
NioSctpChannel：非阻塞的 SCTP 客户端 Channel
NioSctpServerChannel：非阻塞的 SCTP 服务器端 Channel…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/netty/img_16.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个 Netty Channel 包含了一个 ChannelPipeline（其实 Channel 和 ChannelPipeline 互相引用），而 ChannelPipeline 又维护了一个由 ChannelHandlerContext 构成的双向循环列表，其中的每一个 ChannelHandlerContext 都包含一个 ChannelHandler。（前文描述的时候为了简便，直接说 ChannelPipeline 包含了一个 ChannelHandler 责任链，这里给出完整的细节。）&lt;/p&gt;
&lt;h3 id=&#34;23-channel模块设计&#34;&gt;2.3 Channel模块设计&lt;/h3&gt;
&lt;h4 id=&#34;1-事件驱动--指令式设计--过程调用&#34;&gt;1. 事件驱动 + 指令式设计 + 过程调用&lt;/h4&gt;
&lt;p&gt;网络Channel对象 + 执行器 + 不同的事件处理器&lt;/p&gt;
&lt;p&gt;processor.execute(channel(data), executor(executore))&lt;/p&gt;
&lt;h4 id=&#34;2-事件驱动--对象设计--责任链&#34;&gt;2. 事件驱动 + 对象设计 + 责任链&lt;/h4&gt;
&lt;p&gt;面向对象包装Channel：执行器、自身属性、操作定义&lt;/p&gt;
&lt;p&gt;事件处理器责任链化：pipeline&lt;/p&gt;
&lt;p&gt;事件处理器状态机：内部状态流转和外部状态触发
(好几套状态机&amp;hellip;channel/pipeline/bootstrap&amp;hellip;)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内部状态流转的例子：register-&amp;gt;register0-&amp;gt;doregister &amp;mdash;future完成后&amp;mdash;&amp;gt; bind-&amp;gt;dobind0
内部状态流转：bind &amp;ndash;&amp;gt; pipeline.fireChannelActive &amp;mdash;&amp;gt; 一系列handler等内部状态流转 &amp;mdash;&amp;gt; read  &amp;ndash;&amp;gt; 注册read状态位 &amp;ndash;&amp;gt; 进入外部事件触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;register: 接口定义，事件入口
register0: 抽象类封装（递交给eventloop）
doregister: 委托底层实现&lt;/p&gt;
&lt;h3 id=&#34;3-channel接口交互&#34;&gt;3. channel接口交互&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;channel事件入口 ---&amp;gt;递交给  channelpipeline（invoker定义链路操作）  ---&amp;gt;链路入口   channelhandler执行具体链路方法
                                                               ---&amp;gt;上下文    channelcontext
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;channelpipelint: invoker+链路组装&lt;/p&gt;
&lt;p&gt;佐证：channelpipeline(invoker)和handler的方法一一对应
推测：context：面向对象的封装、另开一条链路&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ctx.fireChannelActive(); 链路控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;责任链需要递归无用的handler，通过context直接指向下一个执行者，优化了流程&lt;/p&gt;
&lt;h2 id=&#34;三细节功能&#34;&gt;三、细节功能&lt;/h2&gt;
&lt;h3 id=&#34;31-缓冲区零拷贝&#34;&gt;3.1 缓冲区/零拷贝&lt;/h3&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;32-io异步机制&#34;&gt;3.2 IO异步机制&lt;/h3&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;33-网络协议&#34;&gt;3.3 网络协议&lt;/h3&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;参考文章&#34;&gt;参考文章&lt;/h3&gt;
&lt;h4 id=&#34;io-模型&#34;&gt;IO 模型&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://xie.infoq.cn/article/25d369e183563e44fc50d8168&#34;&gt;https://xie.infoq.cn/article/25d369e183563e44fc50d8168&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Netty Landscape</title>
      <link>https://reactivegroup.github.io/capa.io/blog/2022/05/20/netty-landscape/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://reactivegroup.github.io/capa.io/blog/2022/05/20/netty-landscape/</guid>
      <description>
        
        
        &lt;h2 id=&#34;一netty整体设计概述&#34;&gt;一、Netty整体设计概述&lt;/h2&gt;
&lt;h3 id=&#34;apipeline链设计&#34;&gt;A、Pipeline链设计&lt;/h3&gt;
&lt;h3 id=&#34;b内外状态映射设计&#34;&gt;B、内外状态映射设计&lt;/h3&gt;
&lt;h3 id=&#34;creactor线程模型&#34;&gt;C、Reactor线程模型&lt;/h3&gt;
&lt;h3 id=&#34;d线程池分离&#34;&gt;D、线程池分离&lt;/h3&gt;
&lt;p&gt;Boss Worker&lt;/p&gt;
&lt;h2 id=&#34;二设计思想&#34;&gt;二、设计思想&lt;/h2&gt;
&lt;h3 id=&#34;a可拓展架构&#34;&gt;A、可拓展架构&lt;/h3&gt;
&lt;h3 id=&#34;b命令模式&#34;&gt;B、命令模式&lt;/h3&gt;
&lt;p&gt;将待执行操作包装成命令对象，投递给eventloop线程执行&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
