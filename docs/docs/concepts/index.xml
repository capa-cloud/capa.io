<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Capa – 设计文档</title>
    <link>https://reactivegroup.github.io/capa.io/docs/concepts/</link>
    <description>Recent content in 设计文档 on Capa</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://reactivegroup.github.io/capa.io/docs/concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Actuator可观测性</title>
      <link>https://reactivegroup.github.io/capa.io/docs/concepts/actuator/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://reactivegroup.github.io/capa.io/docs/concepts/actuator/</guid>
      <description>
        
        
        &lt;h1 id=&#34;可观测性-规范定义&#34;&gt;可观测性 规范定义&lt;/h1&gt;
&lt;p&gt;全面的可观测指标度量规范定义&lt;/p&gt;
&lt;h3 id=&#34;a可观测性理论探究&#34;&gt;A、可观测性理论探究&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://icyfenix.cn/assets/img/mtl.7974eb9f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://segmentfault.com/img/bVcSfQs&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s5.51cto.com/oss/202111/19/bdd32d343c4e0d45bac4012e7bc866bc.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;一命名空间-规范定义&#34;&gt;一、命名空间 规范定义&lt;/h2&gt;
&lt;p&gt;命名空间采用分级域名命名方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(顶级域名).一级域名.二级域名.三级域名.x.y.z&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;0顶级域名-云划分&#34;&gt;0、顶级域名: 云划分&lt;/h3&gt;
&lt;p&gt;顶级域名应标识所属云(私有云、公有云)等基础设施。&lt;/p&gt;
&lt;p&gt;但目前各云监控指标命名空间本身隔离，故不考虑加入顶级域名。&lt;/p&gt;
&lt;h3 id=&#34;a一级域名-技术栈领域划分&#34;&gt;A、一级域名: 技术栈领域划分&lt;/h3&gt;
&lt;p&gt;将云原生技术栈划分为4个领域，一级域名标识了所属的层级。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维层（Maintainance）&lt;/li&gt;
&lt;li&gt;应用层（Application）&lt;/li&gt;
&lt;li&gt;中间件层（Middleware）&lt;/li&gt;
&lt;li&gt;基础设施层（Infrastructure）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应一级域命名空间为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ops&lt;/li&gt;
&lt;li&gt;App&lt;/li&gt;
&lt;li&gt;Fxc&lt;/li&gt;
&lt;li&gt;Inf&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参考设计1云原生技术栈stack&#34;&gt;参考设计1：云原生技术栈Stack&lt;/h4&gt;
&lt;p&gt;参考云原生技术栈图示给出的四个层次，使一级域名能够显示出Actuator所属的层级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/blog/news/capa/cloud-native-stack.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;参考设计2携程现有监控指标分类&#34;&gt;参考设计2：携程现有监控指标分类&lt;/h4&gt;
&lt;p&gt;携程监控指标的一级域名主要有&lt;code&gt;System&lt;/code&gt;、&lt;code&gt;FrameworkName&lt;/code&gt;、&lt;code&gt;App&lt;/code&gt;等等。&lt;/p&gt;
&lt;p&gt;不过其技术栈领域的监控划分主要依赖于：使用不同看板进行呈现，相当于不同的监控平台本身对应于不同的技术栈领域。&lt;/p&gt;
&lt;p&gt;应用层的监控主要还是以&lt;code&gt;FrameworkName&lt;/code&gt;为主，反映出了携程是以框架为主体，框架就强绑定了该领域的概念（看到Dal就意味着关系型数据库、看到SOA就意味着RPC领域）。&lt;/p&gt;
&lt;h3 id=&#34;b二次域名-组件领域划分&#34;&gt;B、二次域名: 组件领域划分&lt;/h3&gt;
&lt;h4 id=&#34;1-ops&#34;&gt;1. Ops&lt;/h4&gt;
&lt;p&gt;Ops运维和管理领域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CICD&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-app&#34;&gt;2. App&lt;/h4&gt;
&lt;p&gt;应用层，应在二级域名进行应用类型的划分。&lt;/p&gt;
&lt;p&gt;在这里，我们参考携程的应用类型设计，取运行时语言作为划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-fxc&#34;&gt;3. Fxc&lt;/h4&gt;
&lt;p&gt;主要基于中间件维度进行定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RPC&lt;/li&gt;
&lt;li&gt;MQ&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;li&gt;DB&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Metric&lt;/li&gt;
&lt;li&gt;Log&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-inf&#34;&gt;4. Inf&lt;/h4&gt;
&lt;p&gt;以基础设施作为划分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K8S&lt;/li&gt;
&lt;li&gt;ECS&lt;/li&gt;
&lt;li&gt;AppMesh&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c三次域名-中间件语种-细节划分&#34;&gt;C、三次域名: 中间件/语种/&amp;hellip; 细节划分&lt;/h3&gt;
&lt;p&gt;基于以上 &lt;code&gt;一级域名(技术栈领域).二级域名(组件领域划分)&lt;/code&gt; 的命名空间，我们已经能够体现具体领域。&lt;/p&gt;
&lt;p&gt;但每个领域，都可能有多种实现。
例如在中间件领域，携程命名空间做了 &lt;code&gt;中间件-领域&lt;/code&gt; 的强绑定。&lt;/p&gt;
&lt;p&gt;所以在三级域名的设计上，我们希望体现一些更细节的信息。&lt;/p&gt;
&lt;p&gt;但没有必要像一二级域名一样，保持独立的语义。
故使用 &lt;code&gt;小写+下划线&lt;/code&gt; 作为三级域名的格式标准。
包含更丰富的语义，但视觉上不像一二级域名一样强烈。&lt;/p&gt;
&lt;p&gt;三级域名如果有更多细节需要体现，通过追加的方式进行拓展。&lt;/p&gt;
&lt;h4 id=&#34;1-ops-1&#34;&gt;1. Ops&lt;/h4&gt;
&lt;h4 id=&#34;2-app-1&#34;&gt;2. App&lt;/h4&gt;
&lt;p&gt;从实用性上来看，可以不使用三级域名，直接基于appId等。&lt;/p&gt;
&lt;p&gt;如果要使用，参考携程应用类型定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web&lt;/li&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;job&lt;/li&gt;
&lt;li&gt;serverless&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-fxc-1&#34;&gt;3. Fxc&lt;/h4&gt;
&lt;h4 id=&#34;31-中间件工具&#34;&gt;3.1 中间件/工具&lt;/h4&gt;
&lt;p&gt;组件领域，可能有多种 中间件实现 / 工具。&lt;/p&gt;
&lt;p&gt;所以在三级域名上，我们希望体现 &lt;code&gt;中间件/工具&lt;/code&gt; 的概念。&lt;/p&gt;
&lt;h4 id=&#34;32-语种&#34;&gt;3.2 语种&lt;/h4&gt;
&lt;p&gt;组件领域，中间件领域，都可能有多种编程语言的实现，其SDK内部逻辑不可能完全一致。&lt;/p&gt;
&lt;p&gt;所以在三级域名上，我们希望体现 &lt;code&gt;编程语言&lt;/code&gt; 的概念。&lt;/p&gt;
&lt;h4 id=&#34;33-总结&#34;&gt;3.3 总结&lt;/h4&gt;
&lt;p&gt;对于Fxc而言，目前已有（中间件名称_编程语言）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;capa_java&lt;/li&gt;
&lt;li&gt;ibu_java&lt;/li&gt;
&lt;li&gt;ibu_node&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-inf-1&#34;&gt;4. Inf&lt;/h4&gt;
&lt;p&gt;对于Inf而言，目前已有（工具/产品名称）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ecs&lt;/li&gt;
&lt;li&gt;eks&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参考设计1携程框架监控&#34;&gt;参考设计1：携程框架监控&lt;/h4&gt;
&lt;p&gt;携程在监控命名上，强体现 &lt;code&gt;框架名称&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;d命名空间划分效果&#34;&gt;D、命名空间划分效果&lt;/h3&gt;
&lt;h4 id=&#34;1-ops-2&#34;&gt;1. Ops&lt;/h4&gt;
&lt;h4 id=&#34;cicd&#34;&gt;CICD&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ops.CICD.codepipeline&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-app-2&#34;&gt;2. App&lt;/h4&gt;
&lt;h4 id=&#34;业务应用&#34;&gt;业务应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;App.Java.service&lt;/li&gt;
&lt;li&gt;App.Node.web&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-fxc-2&#34;&gt;3. Fxc&lt;/h4&gt;
&lt;p&gt;中间件领域命名空间&lt;/p&gt;
&lt;h4 id=&#34;rpc&#34;&gt;RPC&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.RPC.capa_java&lt;/li&gt;
&lt;li&gt;Fxc.RPC.ibu_node&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;mq&#34;&gt;MQ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.MQ.ibu_java&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.Configuration.capa_java&lt;/li&gt;
&lt;li&gt;Fxc.Configuration.ibu_java&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;db&#34;&gt;DB&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.DB.dal_java&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redis&#34;&gt;Redis&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.Redis.ibu_java&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;metric&#34;&gt;Metric&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.Metric.capa_java&lt;/li&gt;
&lt;li&gt;Fxc.Metric.ibu_node&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;log&#34;&gt;Log&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fxc.Log.capa_java&lt;/li&gt;
&lt;li&gt;Fxc.Log.ibu_node&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-inf-2&#34;&gt;4. Inf&lt;/h4&gt;
&lt;h4 id=&#34;k8s&#34;&gt;K8S&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Inf.K8S.ecs&lt;/li&gt;
&lt;li&gt;Inf.K8S.eks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二监控指标-规范定义&#34;&gt;二、监控指标 规范定义&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;小写+下划线&lt;/code&gt; 作为 监控指标 名称的格式标准。&lt;/p&gt;
&lt;p&gt;监控指标设计分为：Level0、Level1、Level2层次。&lt;/p&gt;
&lt;h4 id=&#34;1-level0&#34;&gt;1. level0&lt;/h4&gt;
&lt;p&gt;必需监控指标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求量&lt;/li&gt;
&lt;li&gt;耗时
&lt;ul&gt;
&lt;li&gt;avg&lt;/li&gt;
&lt;li&gt;95&lt;/li&gt;
&lt;li&gt;99&lt;/li&gt;
&lt;li&gt;max&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成功率
&lt;ul&gt;
&lt;li&gt;成功量&lt;/li&gt;
&lt;li&gt;失败量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-level1&#34;&gt;2. level1&lt;/h4&gt;
&lt;p&gt;拓展监控指标&lt;/p&gt;
&lt;h3 id=&#34;afxc&#34;&gt;A、Fxc&lt;/h3&gt;
&lt;h4 id=&#34;level0&#34;&gt;level0&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;xx定义为 操作/业务 名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请求量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xx_count&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;耗时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xx_duration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成功率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xx_success&lt;/li&gt;
&lt;li&gt;xx_failure&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三attributes-规范定义&#34;&gt;三、Attributes 规范定义&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;小写+下划线&lt;/code&gt; 作为attributes的格式标准。&lt;/p&gt;
&lt;h3 id=&#34;a必需&#34;&gt;A、必需&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;app_id&lt;/li&gt;
&lt;li&gt;env&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b操作字段&#34;&gt;B、操作字段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;method 操作名称&lt;/li&gt;
&lt;li&gt;stub 端标识（client/server、pub/sub）&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Configuration服务调用</title>
      <link>https://reactivegroup.github.io/capa.io/docs/concepts/configuration-design/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://reactivegroup.github.io/capa.io/docs/concepts/configuration-design/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;通过调用Capa SDK API的方式，管理应用级配置。底层通过SPI的方式注册适配各平台的实现类。&lt;/p&gt;
&lt;h2 id=&#34;调用逻辑&#34;&gt;调用逻辑&lt;/h2&gt;
&lt;p&gt;下图为Capa的Configuration服务调用逻辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/docs/Concepts/Configuration/configuration.png&#34; alt=&#34;Configuration&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service(appid:A):服务调用方，CloudX Configuration Service为服务被调用方，服务被调用方可以是任意云厂商的配置服务&lt;/li&gt;
&lt;li&gt;Service(appid:A)通过Capa SDK发起对Cloud Configuration Service的服务调用&lt;/li&gt;
&lt;li&gt;Capa Configuration API是统一的API规范&lt;/li&gt;
&lt;li&gt;Capa-CloudX Configuration Adaptor SDK为Capa的适配器实现类，通过spi的形式注册&lt;/li&gt;
&lt;li&gt;CloudX Configuration Service提供实际的配置服务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api设计&#34;&gt;API设计&lt;/h2&gt;
&lt;p&gt;Capa Configuration API的设计参考了社区的规范&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto&#34;&gt;Layotto API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/ConfigurationRuntimes.java&#34;&gt;Capa Configuration API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体参数含义如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;storeName&lt;/td&gt;
&lt;td&gt;存储名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;appId&lt;/td&gt;
&lt;td&gt;同一命名空间内的服务唯一ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keys&lt;/td&gt;
&lt;td&gt;配置key列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;metadata&lt;/td&gt;
&lt;td&gt;发送配置请求的元信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;group&lt;/td&gt;
&lt;td&gt;配置组(Optional)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;label&lt;/td&gt;
&lt;td&gt;配置标签(Optional)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;请求响应对象中的泛型对应的具体类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/configuration/ConfigurationRequestItem.java&#34;&gt;ConfigurationRequestItem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;请求对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/configuration/ConfigurationItem.java&#34;&gt;ConfigurationItem&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;获取配置的响应对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/configuration/SubConfigurationResp.java&#34;&gt;SubConfigurationResp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;订阅配置的响应对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: RPC服务调用</title>
      <link>https://reactivegroup.github.io/capa.io/docs/concepts/rpc/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://reactivegroup.github.io/capa.io/docs/concepts/rpc/</guid>
      <description>
        
        
        &lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;h2 id=&#34;调用逻辑&#34;&gt;调用逻辑&lt;/h2&gt;
&lt;p&gt;下图为 Capa 的 RPC 服务调用逻辑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/capa-cloud/capa.io/master/content/images/zh/docs/Concepts/rpc_invoke.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service A 为服务调用方， Service B 为服务被调用方&lt;/li&gt;
&lt;li&gt;Service A 通过 Capa SDK 发起对 Service B 的服务调用&lt;/li&gt;
&lt;li&gt;Capa RPC API 是统一的 API 规范&lt;/li&gt;
&lt;li&gt;通过 SPI 机制可以找到 Capa RPC API 的具体 RPC 实现 RPC Impl&lt;/li&gt;
&lt;li&gt;获取 Service B 的返回数据，并返回给服务调用方 Service A&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-设计&#34;&gt;API 设计&lt;/h2&gt;
&lt;p&gt;Capa的 api 设计参照了社区的规范&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dapr/dapr/blob/master/dapr/proto/runtime/v1/dapr.proto&#34;&gt;Dapr API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto&#34;&gt;Layotto API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/InvocationRuntimes.java&#34;&gt;Capa API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体参数含义如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;appId&lt;/td&gt;
&lt;td&gt;同一命名空间内的服务唯一ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;methodName&lt;/td&gt;
&lt;td&gt;被调用服务的方法名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;request&lt;/td&gt;
&lt;td&gt;要发送调用的服务请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;httpExtension&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/invocation/HttpExtension.java&#34;&gt;HTTP请求方式&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;metadata&lt;/td&gt;
&lt;td&gt;发送请求的元数据（GRPC）或者请求头（HTTP）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clazz&lt;/td&gt;
&lt;td&gt;请求响应的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/utils/TypeRef.java&#34;&gt;请求响应的类型&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;invokeMethodRequest&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/reactivegroup/cloud-runtimes-jvm/blob/master/cloud-runtimes-api/src/main/java/group/rxcloud/cloudruntimes/domain/core/invocation/InvokeMethodRequest.java&#34;&gt;请求对象&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
